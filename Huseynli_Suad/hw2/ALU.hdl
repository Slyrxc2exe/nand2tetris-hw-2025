// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN x[16], y[16], zx, nx, zy, ny, f, no;
    OUT out[16], zr, ng;

    PARTS:
    Mux16(a = x, b = false, sel = zx, out = zerox);
    Not16(in = zerox, out = notzerox);
    Mux16(a = zerox, b = notzerox, sel = nx, out = compx);

    Mux16(a = y, b = false, sel = zy, out = zeroy);
    Not16(in = zeroy, out = notzeroy);
    Mux16(a = zeroy, b = notzeroy, sel = ny, out = compy);

    Add16(a = compx, b = compy, out = compadd);
    And16(a = compx, b = compy, out = compand);

    Mux16(a = compand, b = compadd, sel = f, out = compf);
    Not16(in = compf, out = compneg);
    Mux16(a = compf, b = compneg, sel = no, out = out, out[0..7] = outlow, out[8..15] = outhigh, out[15] = ng);

    Or8Way(in = outlow, out = lower);
    Or8Way(in = outhigh, out = higher);
    Or(a = lower, b = higher, out = outor);
    Not(in = outor, out = zr);
}




